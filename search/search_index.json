{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the ExoSuite Developer Portal","text":"<p>ExoSuite is a modular symbolic mathematics engine stack built to support large-scale prime discovery, symbolic factoring, and post-quantum cryptography workflows.</p>"},{"location":"#engines","title":"Engines","text":"<ul> <li>PrimeEngineAI</li> <li>FactorEngine</li> <li>QuantumHash</li> </ul> <p>Each engine is modular and integrates symbolic logic, GPU acceleration, and REST APIs.</p> <p>Explore architecture, workflows, deployment, and governance below.</p>"},{"location":"architectural_guide/","title":"ExoSuite Architectural Guide","text":""},{"location":"architectural_guide/#overview","title":"Overview","text":"<p>ExoSuite is a modular symbolic mathematics engine consisting of 3 integrated components: - PrimeEngineAI for prime discovery - FactorEngine for symbolic factoring - QuantumHash for cryptographic transformation</p> <p>Each module runs independently but shares a common symbolic core.</p>"},{"location":"architectural_guide/#core-components","title":"Core Components","text":""},{"location":"architectural_guide/#symbolic-core-shared","title":"\ud83d\udd39 Symbolic Core (Shared)","text":"<ul> <li><code>symbolic_factoring.py</code>: filtering and truncation rules</li> <li><code>shared_data_exchange.py</code>: common exchange protocols</li> <li><code>black_box_io.py</code>: standard I/O for black-box testing</li> </ul>"},{"location":"architectural_guide/#gpu-compute","title":"\ud83d\udd39 GPU Compute","text":"<ul> <li><code>gpu_miller_rabin.py</code>: accelerated primality tests</li> <li><code>docker-compose.yml</code>: containerized deployment</li> </ul>"},{"location":"architectural_guide/#apis-interoperability","title":"APIs &amp; Interoperability","text":"<ul> <li>FastAPI-based REST endpoints per engine</li> <li>Swagger docs at <code>/docs</code></li> <li>Shared ports: 8001 (prime), 8002 (factor), 8003 (hash)</li> <li>Prometheus metrics at port <code>9000</code></li> </ul>"},{"location":"architectural_guide/#deployment-layers","title":"Deployment Layers","text":"<ol> <li>Local Dev</li> <li>Uvicorn + Docker</li> <li>Containerized</li> <li>Docker Compose or ECS</li> <li>Cloud Infra</li> <li>Terraform: EC2 + ALB + HTTPS</li> <li>Route53 for domain setup</li> <li>Sync/Automation</li> <li>GitHub Actions: sync + changelog</li> <li><code>sync_exosuite_repos.py</code>: repo parity</li> </ol>"},{"location":"architectural_guide/#extension-strategy","title":"Extension Strategy","text":"<ul> <li>Extend symbolic logic via <code>symbolic_factoring.py</code></li> <li>New pipelines added in <code>examples/</code></li> <li>Expose new APIs in <code>api/main.py</code></li> </ul>"},{"location":"architectural_guide/#governance","title":"Governance","text":"<p>All changes to any engine must be mirrored across: - Codebase structure - Shared modules - Infrastructure setup - Documentation standards</p>"},{"location":"changelog/","title":"ExoSuite Changelog","text":""},{"location":"changelog/#100-initial-release","title":"[1.0.0] - Initial Release","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>PrimeEngineAI, FactorEngine, QuantumHash full implementations</li> <li>Symbolic filtering, GPU sieving, REST API, FastAPI</li> <li>Dockerfiles, Terraform AWS deployment</li> <li>Pre-commit, CI, and MkDocs docs</li> <li>Developer guide, example workflows</li> <li>Route53 + HTTPS support via Terraform</li> </ul>"},{"location":"contributing/","title":"Contributing to ExoSuite","text":"<p>We welcome contributions to ExoSuite! Please follow the guidelines below to help maintain consistency and code quality.</p>"},{"location":"contributing/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ol> <li>Fork the repository</li> <li>Clone your fork</li> <li>Create a new branch (<code>feature/my-feature</code>)</li> <li>Commit your changes with clear messages</li> <li>Push to your fork and submit a pull request</li> </ol>"},{"location":"contributing/#contribution-checklist","title":"\u2705 Contribution Checklist","text":"<ul> <li>Follow the structure and naming conventions of the ExoProject template</li> <li>Add tests for any new logic in <code>tests/</code></li> <li>Validate your code with:   <code>bash   pytest   pre-commit run --all-files</code></li> </ul>"},{"location":"contributing/#test-strategy","title":"\ud83e\uddea Test Strategy","text":"<ul> <li>Unit tests should cover critical paths</li> <li>Black-box tests go in <code>tests/test_exosuite.py</code></li> <li>Use <code>examples/</code> for CLI and API demonstrations</li> </ul>"},{"location":"contributing/#security-code-quality","title":"\ud83d\udd12 Security &amp; Code Quality","text":"<ul> <li>Use <code>pre-commit</code> to scan for secrets and enforce formatting</li> <li>Adhere to PEP8 via <code>flake8</code> or <code>black</code></li> </ul>"},{"location":"contributing/#documentation","title":"\ud83d\udcd8 Documentation","text":"<ul> <li>Update <code>README.md</code> or <code>DEVELOPER_GUIDE.md</code> for new components</li> <li>Include diagrams or examples as needed in <code>docs/</code></li> </ul> <p>We maintain strict parity across all ExoSuite engines: changes to one must propagate to all.</p>"},{"location":"developer_guide/","title":"ExoSuite Developer Guide","text":"<p>This guide provides developers with everything needed to build, test, deploy, and extend the ExoSuite engine.</p>"},{"location":"developer_guide/#project-structure","title":"\ud83d\udce6 Project Structure","text":"<ul> <li><code>engine_core.py</code>: Main entry point and processing pipeline</li> <li><code>symbolic_factoring.py</code>: Symbolic filters and rule-based pruning</li> <li><code>gpu_miller_rabin.py</code>: GPU-based primality check</li> <li><code>black_box_io.py</code>: Handles input/output for black-box testing</li> <li><code>api/main.py</code>: FastAPI server exposing factoring/prime/hash endpoints</li> <li><code>examples/</code>: CLI demos and integration workflows</li> <li><code>tests/</code>: Unit and black-box test suites</li> </ul>"},{"location":"developer_guide/#testing","title":"\ud83e\uddea Testing","text":"<p>Run local tests:</p> <pre><code>pytest tests/\n</code></pre> <p>Black-box test validation:</p> <pre><code>pytest tests/test_exosuite.py\n</code></pre>"},{"location":"developer_guide/#local-api-run","title":"\ud83d\udda5\ufe0f Local API Run","text":"<pre><code>uvicorn api.main:app --reload\n</code></pre> <p>Open Swagger docs: - <code>http://localhost:8000/docs</code></p>"},{"location":"developer_guide/#docker","title":"\ud83d\udc33 Docker","text":"<pre><code>docker build -t exosuite-engine .\ndocker run -p 8000:8000 exosuite-engine\n</code></pre>"},{"location":"developer_guide/#terraform-cloud-deployment","title":"\u2601\ufe0f Terraform Cloud Deployment","text":"<pre><code>cd infra/terraform\nterraform init\nterraform apply\n</code></pre> <p>Use <code>Makefile</code> for convenience:</p> <pre><code>make apply\n</code></pre>"},{"location":"developer_guide/#pre-commit-hooks","title":"\ud83d\udd10 Pre-commit Hooks","text":"<pre><code>pre-commit install\npre-commit run --all-files\n</code></pre>"},{"location":"developer_guide/#docs","title":"\ud83d\udcda Docs","text":"<p>Edit in <code>docs/</code> and preview with:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"developer_guide/#extensions","title":"\ud83d\udee0 Extensions","text":"<ul> <li>Add symbolic filters to <code>symbolic_factoring.py</code></li> <li>Add new API routes in <code>api/main.py</code></li> <li>Add integration flows in <code>examples/</code></li> </ul> <p>This engine is part of the ExoSuite stack and should maintain parity with all other modules.</p>"},{"location":"factorengine/","title":"FactorEngine","text":"<p>See the full documentation in the FactorEngine/ folder.</p>"},{"location":"glossary/","title":"Glossary of Terms (Unified)","text":"<p>Symbolic Filtering: Logical pattern-based composite elimination Tiered Cache: Hierarchical memory of symbolic rejections GPU Sieving: Parallel candidate filtering on GPU cores Infinitesimal Remainders: Lightweight check for statistical composite confidence Modular Hash Split: Deterministic key transformation using numeric domains Composite Exclusion Rules: Hardcoded or AI-learned composite identifiers</p>"},{"location":"primeengineai/","title":"PrimeEngineAI","text":"<p>See the full documentation in the PrimeEngineAI/ folder.</p>"},{"location":"quantumhash/","title":"QuantumHash","text":"<p>See the full documentation in the QuantumHash/ folder.</p>"},{"location":"spec/","title":"Formal API Specification for ExoSuite","text":""},{"location":"spec/#available-apis","title":"Available APIs","text":"<ul> <li><code>orchestrate_factoring(n: int) -&gt; dict</code>: Runs end-to-end factoring across engines.</li> </ul>"},{"location":"spec/#preconditions","title":"Preconditions","text":"<ul> <li><code>n</code> is positive integer.</li> </ul>"},{"location":"spec/#postconditions","title":"Postconditions","text":"<ul> <li>Returns a dict with results and timing metrics.</li> </ul>"},{"location":"spec/#updates","title":"Updates","text":"<ul> <li>Cache Persistence &amp; Metrics: Caches persisted to disk at exit (<code>CACHE_PERSIST_PATH</code>). Hit/miss metrics collected for symbolic, hash, and factor caches.</li> <li>Configurable TTL &amp; Eviction: <code>SYMBOLIC_CACHE_MAX</code>, <code>SYMBOLIC_CACHE_TTL</code>, <code>HASH_CACHE_TTL</code> via env vars.</li> <li>Asynchronous Parallel Orchestration: Engines invoked in parallel using <code>ThreadPoolExecutor</code>.</li> <li>Nearest-Neighbor &amp; Fuzz Testing: System-level tests added for edge-case composites and Hypothesis-driven fuzz.</li> <li>Performance Regression Gate: CI performance test thresholds set (e.g., 0.1s per input).</li> </ul>"},{"location":"status_dashboard/","title":"ExoSuite Sync &amp; Version Dashboard","text":"Engine Repo Current Tag Last Sync with Master Parity Status Changelog Updated PrimeEngineAI <code>PrimeEngineAI</code> v1.0.0 Manual (via Action) \u2705 Synced \u2705 Auto FactorEngine <code>FactorEngine</code> v1.0.0 Manual (via Action) \u2705 Synced \u2705 Auto QuantumHash <code>QuantumHash</code> v1.0.0 Manual (via Action) \u2705 Synced \u2705 Auto <p>Use the \"Sync From ExoSuite\" GitHub Action in each repo to pull updates from the master repo on demand.</p>"},{"location":"wbs/","title":"ExoSuite Work Breakdown Structure (WBS)","text":""},{"location":"wbs/#1-core-engine-modules","title":"1. Core Engine Modules","text":"<p>1.1 PrimeEngineAI     - Symbolic filtering logic     - GPU sieving module     - API endpoints   1.2 FactorEngine     - Recursive factoring engine     - GPU Miller-Rabin validation     - API endpoints   1.3 QuantumHash     - Modular hash engine     - Symbolic re-keying     - Post-quantum layer</p>"},{"location":"wbs/#2-infrastructure","title":"2. Infrastructure","text":"<p>2.1 Dockerfile per engine   2.2 Docker Compose (multi-engine)   2.3 Terraform provisioning (EC2 + Route53)   2.4 Prometheus metrics integration</p>"},{"location":"wbs/#3-automation","title":"3. Automation","text":"<p>3.1 GitHub Actions for CI   3.2 Sync workflow   3.3 Auto changelog updater   3.4 Pre-commit hooks</p>"},{"location":"wbs/#4-documentation","title":"4. Documentation","text":"<p>4.1 DEVELOPER_GUIDE.md (per engine)   4.2 CONTRIBUTING.md   4.3 CHANGELOG.md   4.4 MkDocs setup   4.5 Diagrams + Wiki landing page</p>"},{"location":"wbs/#5-distribution","title":"5. Distribution","text":"<p>5.1 Repo zip packaging   5.2 GitHub org setup script   5.3 Private pitch kit</p>"}]}